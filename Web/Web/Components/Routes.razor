@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<CascadingAuthenticationState>
            <Router AppAssembly="typeof(Program).Assembly" AdditionalAssemblies="new[] { typeof(Client._Imports).Assembly }">
                <Found Context="routeData">
                    <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)"/>
                    <FocusOnNavigate RouteData="routeData" Selector="h1"/>
                </Found>
            </Router>

</CascadingAuthenticationState>


@code {
    private ClaimsPrincipal? _user;
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            // Récupérer l'état d'authentification
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _user = authState.User;
    
            // Si l'utilisateur n'est pas authentifié, redirige vers la page de login
            if (_user?.Identity?.IsAuthenticated != true && Navigation.Uri != "/connexion" && Navigation.Uri != "/inscription")
            {
                Navigation.NavigateTo("/connexion");
            }
            else
            {
                _isLoading = false;
            }
    
            StateHasChanged(); // Force le rendu pour mettre à jour l'UI après l'authentification
        }
    }
}